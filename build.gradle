buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
		jcenter()
	}
	dependencies {
		classpath "org.javamodularity:moduleplugin:1.2.1"
	}
}

plugins {
	// id 'org.javamodularity.moduleplugin' version '1.2.1'
	id 'java'
}

sourceCompatibility = 11
targetCompatibility = 11

repositories {
	mavenLocal()
	mavenCentral()
}

subprojects {

	apply plugin: 'eclipse'
	apply plugin: 'org.javamodularity.moduleplugin'

	sourceCompatibility = 11
	targetCompatibility = 11

	eclipse {
		classpath {
			file {
				whenMerged {
					//Define a module as being either a library or a project dependency.
					//Test sources are excluded because eclipse wants them on the classpath for some reason (1)
					entries.findAll { isModule(it) }.each {
						it.entryAttributes['module'] = 'true'
					}

					//Test-scoped stuff should set the appropriate flag
					entries.findAll { isTest(it) }.each {
						it.entryAttributes['test'] = 'true'
					}
				}
			}
		}
	}

	afterEvaluate {
		repositories {
			jcenter()
		}
	}
}

boolean isLibrary(entry) { return entry instanceof org.gradle.plugins.ide.eclipse.model.Library }
boolean isProjectDependency(entry) { return entry instanceof org.gradle.plugins.ide.eclipse.model.ProjectDependency }

boolean isTestScope(entry) { return entry.entryAttributes.get('gradle_used_by_scope').equals('test'); }
boolean isSource(entry) { return entry.properties.kind.equals('src'); }

boolean isModule(entry) { (isLibrary(entry) || isProjectDependency(entry)) && !isTestScope(entry); }
boolean isTest(entry) { (isSource(entry) || isLibrary(entry)) && isTestScope(entry); }
