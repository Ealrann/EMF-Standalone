buildscript {
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "org.javamodularity:moduleplugin:1.5.0"
	}
}

repositories {
	mavenCentral()
}

subprojects {

	apply plugin: 'eclipse'
	apply plugin: 'maven-publish'
	apply plugin: 'org.javamodularity.moduleplugin'

	version "2.20.0"

	sourceCompatibility = 11
	targetCompatibility = 11


	task sourceJar(type: Jar) {
		from sourceSets.main.allJava
	}

	publishing {
		repositories {
			maven {
				name = "Github"
				url = uri("https://maven.pkg.github.com/ealrann/emf-standalone")
				credentials {
					username = findProperty("github.username")
					password = findProperty("github.token")
				}
			}
		}
		publications {
			gpr(MavenPublication) {
				groupId = 'emf.standalone'
				artifactId = project.name
				from(components.java)
				artifact sourceJar {
					classifier "sources"
				}
			}
		}
	}

	eclipse {
		jdt {
			file {
				withProperties { properties ->
					// set properties for the file org.eclipse.jdt.core.prefs
					properties['org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation'] = 'ignore'
					properties['org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation'] = 'ignore'
				}
			}
		}
		classpath {
			file {
				whenMerged {
					//Define a module as being either a library or a project dependency.
					//Test sources are excluded because eclipse wants them on the classpath for some reason (1)
					entries.findAll { isModule(it) }.each {
						it.entryAttributes['module'] = 'true'
					}

					//Test-scoped stuff should set the appropriate flag
					entries.findAll { isTest(it) }.each {
						it.entryAttributes['test'] = 'true'
					}
				}
			}
		}
	}
}

boolean isLibrary(entry) { return entry instanceof org.gradle.plugins.ide.eclipse.model.Library }
boolean isProjectDependency(entry) { return entry instanceof org.gradle.plugins.ide.eclipse.model.ProjectDependency }

boolean isTestScope(entry) { return entry.entryAttributes.get('gradle_used_by_scope').equals('test'); }
boolean isSource(entry) { return entry.properties.kind.equals('src'); }

boolean isModule(entry) { (isLibrary(entry) || isProjectDependency(entry)) && !isTestScope(entry); }
boolean isTest(entry) { (isSource(entry) || isLibrary(entry)) && isTestScope(entry); }
